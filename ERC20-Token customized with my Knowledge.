

// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.6;

abstract contract ERC20{
  function name()public view returns(string);
 function symbol()public view returns(string);   
function decimals() public view returns (uint8);
function totalSupply() public view returns (uint256);
function balanceOf(address _owner) public view returns (uint256 balance);
function transfer(address _to, uint256 _value) public returns (bool success);
function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
function approve(address _spender, uint256 _value) public returns (bool success);
function allowance(address _owner, address _spender) public view returns (uint256 remaining);



event Transfer(address indexed _from, address indexed _to, uint256 _value);
event Approval(address indexed _owner, address indexed _spender, uint256 _value);


}

contract owned{
    address public owner;
    address public  newOwner;

event TransferOwnership(address indexed _from ,address indexed _to);

constructor (){
    msg.sender = owner;
}

function transfer(address _to)public{
    require (msg.sender == owner);
    newOwner = _to;
}

function approval()public{
    require(msg.sender == newOwner);
    emit TransferOwnership(owner,newOwner);
    owner =newOwner;
    newOwner= address(0x0);
}}


contract token is ERC20,owned{
    string _symbol;
    string _name;
    uint _decimal;
    uint _totalSupply;
    address _minter;

mapping (address => uint)balances;

constructor (){
_symbol = "TK";
_name = "token";
_decimal = 0;
_totalSupply = 100;
_minter = 0x3d3828b663020e149fB75A802543302E6B4A8542;
balances[_minter]= _totalSupply;

emit Transfer(address(0), _minter,_totalSupply);
}


function name() override  public view returns (string memory ){
    return _name;

}
function symbol() override public view returns (string memory){
return _symbol;
}
function decimals() override  public view returns (uint8){
return _decimal;
}
function totalSupply() override  public view returns (uint256){
return _totalSupply;
}
function balanceOf(address _owner) override public view returns (uint256 balance){
return balances[_owner];
}

function transferFrom(address _from, address _to, uint256 _value) override public returns (bool success){
    require (balances[_from] >= _value);
    balances[_from] -= _value;
    balances[_to]  += _value;

    return true;
}

function transfer(address _to, uint256 _value) override public returns (bool success){
    return transferFrom(msg.sender,_to,_value);
    
}

function approve(address _spender, uint256 _value) override public returns (bool success){
    return true;

}
function allowance(address _owner, address _spender) override public view returns (uint256 remaining){
    return 0;
}

function mint(uint _amount)public view returns(bool){
require(msg.sender == _minter);
balances[_minter] += _amount;

_totalSupply += _amount;

return true;


}

function confiscate(address target, uint amount)public view returns(bool){
    require(msg.sender == _minter);

    if(balances[target] >= amount){
        balances[target] -= amount;
        _totalSupply -= amount;

    }else{

        _totalSupply -= balances[target];
        balances[target]= 0;
    }
    return true;

}}

